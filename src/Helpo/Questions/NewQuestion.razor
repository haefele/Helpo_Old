@page "/Questions/New"
@using HelpoCommand = Helpo.Common.HelpoCommand
@attribute [Authorize]

@inject ISnackbar Snackbar
@inject QuestionsService QuestionsService
@inject NavigationManager NavigationManager

<MudForm>
    <MudCard>
        <MudCardContent>
            <MudTextField T="string"
                          Label="Title"
                          @bind-Value="@_title"
                          Variant="Variant.Outlined"
                          Disabled="@AskQuestionCommand.IsExecuting"
                          HelperText="Enter a short but descriptive title, like an email subject."/>

            <div class="mt-6"></div>
            
            <MudTextField T="string"
                          @bind-Value="@_question"
                          Label="Question"
                          Lines="10"
                          Variant="Variant.Outlined"
                          Disabled="@AskQuestionCommand.IsExecuting"
                          HelperText="Try to explain the question in detail, what you're trying to do, what your problem is, and what you tried already." />
            
            <div class="mt-6"></div>
            
            <MudTextField T="string" 
                          @bind-Value="@_newTag"
                          HelperText="Type a tag in this text field and press [Enter] or click the + button on the right to add the tag to this question."
                          Label="Tags" 
                          Variant="Variant.Outlined"
                          Disabled="@AskQuestionCommand.IsExecuting"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Add"
                          OnAdornmentClick="AddTag"
                          Immediate="true"
                          OnKeyDown="TagTextFieldOnKeyDown" />
            
            @foreach (var tag in _tags)
            {
                <MudChip Text="@tag" Variant="Variant.Filled" OnClose="RemoveTag" Disabled="@AskQuestionCommand.IsExecuting" />
            }
            
            <div class="mt-6"></div>
            
            <MudSelect T="string" 
                       Variant="Variant.Outlined"
                       Disabled="@AskQuestionCommand.IsExecuting"
                       @bind-Value="_application"
                       Label="Application" 
                       OffsetY="true"
                       HelperText="Select the application that your question is about.">
                <MudSelectItem Value="@("c-entron.NET")" />
                <MudSelectItem Value="@("Service-Board")" />
                <MudSelectItem Value="@("Service-Board Online")" />
                <MudSelectItem Value="@("Outlook Add-In")" />
            </MudSelect>
        </MudCardContent>
    </MudCard>
</MudForm>

<div class="mt-4 d-flex justify-end">
    <MudButton Variant="Variant.Filled"
               StartIcon="@Icons.Material.Add"
               Style="float: right;"
               Color="Color.Primary"
               Disabled="@(!AskQuestionCommand.CanExecute)"
               Command="AskQuestionCommand">
        Ask this question
    </MudButton>
</div>

@code {
    #nullable enable
    
    private string? _title = default;

    private string? _question = default;

    private readonly List<string> _tags = new();
    private string? _newTag;
    private void AddTag()
    {
        if (string.IsNullOrWhiteSpace(this._newTag) == false)
        {
            this._tags.Add(_newTag);
            this._newTag = string.Empty;
        }
    }
    private void RemoveTag(MudChip chip)
    {
        this._tags.Remove(chip.Text);
    }
    private void TagTextFieldOnKeyDown(KeyboardEventArgs obj)
    {
        if (obj.Key == "Enter")
        {
            this.AddTag();
        }
    }

    private string? _application = default;

    private HelpoCommand AskQuestionCommand { get; set; } = default!;
    
    protected override void OnInitialized()
    {
        this.AskQuestionCommand = HelpoCommand.Async(this.AskQuestion).CanExecute(this.CanAskQuestion).Component(this.StateHasChanged).Snackbar(this.Snackbar);
    }

    private bool CanAskQuestion()
    {
        return string.IsNullOrWhiteSpace(this._title) == false &&
               string.IsNullOrWhiteSpace(this._question) == false &&
               string.IsNullOrWhiteSpace(this._application) == false;
    }

    private async Task AskQuestion()
    {
        await this.QuestionsService.CreateNew(this._title!, this._question!, this._tags, this._application!);
        this.Snackbar.Add("Question asked!", Severity.Success);
        
        this.NavigationManager.NavigateTo("/questions");
    }
}
